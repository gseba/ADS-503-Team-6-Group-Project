---
title: "Group 6 Final Project"
author: "Muris Saab, Ghassan Seba"
format: html
editor: visual
---

## Kidney Stone Prediction based on Urine Analysis

### Import Packages

```{r}
suppressPackageStartupMessages({
library(caret)
library(AppliedPredictiveModeling)
library(dplyr)
library(ggplot2)
library(tidyr)
library(gridExtra)
library(skimr)
library(outliers)
library(gridExtra)
library(reshape2)
library(corrplot)
library(stats)
library(car)
library(randomForest)
library(pROC)
})
```

### Read in CSV File

```{r}
# Read CSV into data frame
kidney_data <- read.csv("kindey_stone_urine_analysis.csv")
```

## Exploratory Data Analysis (EDA)

### Initial Inspection

```{r}
# Check first & last five rows and dimensions of data frame
dim(kidney_data)
head(kidney_data)
tail(kidney_data)
```

```{r}
# Identify data types
str(kidney_data)
```

### Data Cleaning & Univariate Analysis

```{r}
# Check for missing values
missing_data <- sum(is.na(kidney_data))
missing_data
```

#### Create Boxplots

```{r}
suppressWarnings({
# Define a function to create boxplots with mean points
create_boxplot <- function(data, y_var, title, ylab) {
  mean_val <- mean(data[[y_var]], na.rm = TRUE)
  
  plot <- ggplot(data = data, aes_string(y = y_var)) + 
    geom_boxplot(outlier.color = "red", fill = "lightblue") + 
    scale_x_discrete() +
    labs(title = title, y = ylab) + 
    coord_flip() + 
    geom_point(aes(x = 0, y = mean_val),  
               shape = 16,                       
               size = 2,                         
               color = "blue") +
    theme(plot.title = element_text(hjust = 0.5, size = 12))
  
  return(plot)
}

# Create boxplots for each variable
plot1 <- create_boxplot(kidney_data, "gravity", "Urine Specific Gravity", "Gravity")
plot2 <- create_boxplot(kidney_data, "ph", "Urine pH", "pH")
plot3 <- create_boxplot(kidney_data, "osmo", "Urine Osmolarity (mOsm/L)", "Osmo")
plot4 <- create_boxplot(kidney_data, "cond", "Urine Conductivity (mMho)", "Cond")
plot5 <- create_boxplot(kidney_data, "urea", "Urine Urea Concentration (mmol/L)", "Urea")
plot6 <- create_boxplot(kidney_data, "calc", "Urine Calcium Concentration (mmol/L)", "Calc")

# Arrange boxplots in a 3x2 matrix
grid.arrange(
  arrangeGrob(plot1, plot2, ncol = 2), 
  arrangeGrob(plot3, plot4, ncol = 2), 
  arrangeGrob(plot5, plot6, ncol = 2), 
  ncol = 1
)
})
```

#### Further investigate Outliers

```{r}
# Grubbs' test for single outlier
grubbs_test_ph <- grubbs.test(kidney_data$ph, type = 10)
grubbs_test_calc <- grubbs.test(kidney_data$calc, type = 10)

# Print Grubbs' test results
cat("Grubbs' test for ph:\n")
print(grubbs_test_ph)

cat("Grubbs' test for calc:\n")
print(grubbs_test_calc)

```

```{r}
# Function to calculate z-scores for a vector
calculate_z_scores <- function(x) { (x - mean(x)) / sd(x)}

# Set the z-score threshold for outlier detection
z_score_threshold <- 2.5

# Calculate z-scores for pH & calc
ph_z_scores <- calculate_z_scores(kidney_data$ph)
calc_z_scores <- calculate_z_scores(kidney_data$calc)


# Identify outliers based on z-scores
ph_outliers <- kidney_data %>%
  filter(abs(ph_z_scores) > z_score_threshold) %>%
  select(ph)

calc_outliers <- kidney_data %>%
  filter(abs(calc_z_scores) > z_score_threshold) %>%
  select(calc)

# Print the outliers
#print(ph_outliers)
#print(calc_outliers)

# Function to apply Dixon's Q test if sample size is between 3 and 30
apply_dixons_q_test <- function(data, column_name) {
  column_data <- data[[column_name]]
  sample_size <- length(column_data)
  
  if (sample_size >= 3 && sample_size <= 30) {
    result <- dixon.test(column_data, opposite = TRUE)
    return(result)
  } else {
    return(paste("Sample size for", column_name, "is", sample_size, "which is outside the range of 3-30"))
  }
}

# Perform Dixon's Q test on pH outliers
ph_test_results <- apply_dixons_q_test(ph_outliers, "ph")
cat("Dixon's Q Test for pH Outliers:\n")
print(ph_test_results)

# Perform Dixon's Q test on calc outliers
calc_test_results <- apply_dixons_q_test(calc_outliers, "calc")
cat("Dixon's Q Test for Calc Outliers:\n")
print(calc_test_results)

```

#### Create Histograms to Investigate Distributions Further

```{r}
# Define a function to create histograms with mean and median lines
create_histogram <- function(data, x_var, title, xlab) {
  mean_val <- mean(data[[x_var]], na.rm = TRUE)
  median_val <- median(data[[x_var]], na.rm = TRUE)
  
  hist <- ggplot(data = data, aes_string(x = x_var)) +
    geom_histogram(bins = 20, color = "black", fill = "lightblue") +  
    geom_vline(xintercept = mean_val, color = "red", linetype = "solid", linewidth = 1) +
    geom_vline(xintercept = median_val, color = "blue", linetype = "solid", linewidth = 1) +
    labs(title = title, x = xlab) +
    theme(plot.title = element_text(hjust = 0.5, size = 12))
  
  return(hist)
}

# Create histograms for each variable
hist1 <- create_histogram(kidney_data, "gravity", "Urine Specific Gravity", "Gravity")
hist2 <- create_histogram(kidney_data, "ph", "Urine pH", "pH")
hist3 <- create_histogram(kidney_data, "osmo", "Urine Osmolarity (mOsm/L)", "Osmo")
hist4 <- create_histogram(kidney_data, "cond", "Urine Conductivity (mMho)", "Cond")
hist5 <- create_histogram(kidney_data, "urea", "Urine Urea", "Urea")
hist6 <- create_histogram(kidney_data, "calc", "Urine Calcium", "Calc")

# Arrange histograms in a 3x2 matrix
grid.arrange(
  arrangeGrob(hist1, hist2, ncol = 2),
  arrangeGrob(hist3, hist4, ncol = 2),
  arrangeGrob(hist5, hist6, ncol = 2),
  ncol = 1
)
```

```{r}
# Summary Statistics 
skim(kidney_data)
```

### Scatter plots - Predictor Relationships

```{r}
# Define the predictor variables
kidney_predictor_vars <- c("gravity", "ph", "osmo", "cond", "urea", "calc")

# Subset the kidney_data dataframe using the predictor variables
kidney_predictor_data = kidney_data[kidney_predictor_vars]

# Run grid of pairwise scatter plots for preditor variables
pairs(kidney_predictor_data)
```

### Correlation Matrix - Predictor Relationships

```{r}
# Calculate correlations for predictor variables:
kidney_correlations <- cor(kidney_predictor_data)

# Plot the correlation matrix for kidney data
corrplot(kidney_correlations, method = 'color', order = 'hclust', addCoef.col = 'black', tl.pos = 'd', cl.pos = 'r', col = COL2('PRGn'), outline=TRUE)

# Round the correlation matrix for better readability
rounded_correlations <- round(kidney_correlations, 2)

# Convert the matrix to a data frame 
df_correlations <- as.data.frame(rounded_correlations)

df_correlations
```

### Predictor Variable Correlation with Target Variable

```{r}
# Calculate correlation matrix
cor_matrix <- cor(kidney_data)

# Extract correlations with the target variable
cor_with_target <- cor_matrix[, "target"]

# Create data frame for plotting
cor_df <- data.frame(Variable = rownames(cor_matrix), Correlation = cor_with_target)

# Remove the row corresponding to 'target'
cor_df <- cor_df[cor_df$Variable != "target", ]

print(cor_df)

# Plot correlation values with the target variable using a bar plot
ggplot(cor_df, aes(x = reorder(Variable, -Correlation), y = Correlation)) +
  geom_bar(stat = "identity", fill = "dodgerblue") +
  coord_flip() +
  labs(title = "Correlation with the Target Variable",
       x = "Predictor Variable",
       y = "Correlation") +
  theme_minimal() +
    theme(plot.title = element_text(hjust = 0.5, size = 14))
  
```

### Covariance Matrix - Predictor/Response Relationships

```{r}
# Calculate covariance matrix
cov_matrix <- cov(kidney_data)

# Print covariance matrix with rounded values
print(round(cov_matrix, digits = 2))

```

## Feature Engineering Based Using EDA Findings

#### Polynomial Features - Features that did not show strong linear relationship with target

```{r}
# Copy the original dataframe
kidney_data_expand <- kidney_data

# Add polynomial features to the new dataframe
kidney_data_expand$ph_squared <- kidney_data_expand$ph^2
kidney_data_expand$ph_cubed <- kidney_data_expand$ph^3

kidney_data_expand$cond_squared <- kidney_data_expand$cond^2
kidney_data_expand$cond_cubed <- kidney_data_expand$cond^3

# Display new dataframe 
head(kidney_data_expand)

```

#### Aggregate Features - Based on Biological Relevance

```{r}
# Normalize features in the expanded dataset
kidney_data_expand$norm_osmo <- scale(kidney_data_expand$osmo, center = TRUE, scale = TRUE)
kidney_data_expand$norm_cond <- scale(kidney_data_expand$cond, center = TRUE, scale = TRUE)
kidney_data_expand$norm_calc <- scale(kidney_data_expand$calc, center = TRUE, scale = TRUE)
kidney_data_expand$norm_ph <- scale(kidney_data_expand$ph, center = TRUE, scale = TRUE)

# Calculate mean aggregates
kidney_data_expand$mean_agg_osmo_cond <- rowMeans(kidney_data_expand[, c("norm_osmo", "norm_cond")], na.rm = TRUE)
kidney_data_expand$mean_agg_calc_ph <- rowMeans(kidney_data_expand[, c("norm_calc", "norm_ph")], na.rm = TRUE)

# Calculate max aggregates
kidney_data_expand$max_agg_osmo_cond <- pmax(kidney_data_expand$norm_osmo, kidney_data_expand$norm_cond, na.rm = TRUE)
kidney_data_expand$max_agg_calc_ph <- pmax(kidney_data_expand$norm_calc, kidney_data_expand$norm_ph, na.rm = TRUE)

# List of normalized features to remove
norm_features <- c("norm_osmo", "norm_cond", "norm_calc", "norm_ph")

# Remove the normalized features from the dataframe
kidney_data_expand <- kidney_data_expand[, !(names(kidney_data_expand) %in% norm_features)]

# Display the modified dataframe 
head(kidney_data_expand)

```

#### Ratio Features - Based on Biological Relevance

```{r}
# Normalize urea and calcium in the expanded dataset
kidney_data_expand$norm_urea <- scale(kidney_data_expand$urea, center = TRUE, scale = TRUE)
kidney_data_expand$norm_calc <- scale(kidney_data_expand$calc, center = TRUE, scale = TRUE)
kidney_data_expand$norm_osmo <- scale(kidney_data_expand$osmo, center = TRUE, scale = TRUE)
kidney_data_expand$norm_cond <- scale(kidney_data_expand$cond, center = TRUE, scale = TRUE)

# Calculate the normalized ratio of calcium to urea
kidney_data_expand$calc_to_urea_ratio <- kidney_data_expand$norm_calc / kidney_data_expand$norm_urea

# Calculate the normalized ratio of Osmolarity to Conductivity 
kidney_data_expand$osmo_to_cond_ratio <- kidney_data_expand$norm_osmo / kidney_data_expand$norm_cond

# List of normalized features to remove
norm_features <- c("norm_urea", "norm_calc", "norm_osmo", "norm_cond")

# Remove the normalized features from the dataframe
kidney_data_expand <- kidney_data_expand[, !(names(kidney_data_expand) %in% norm_features)]

# View the first few rows to verify the new columns
head(kidney_data_expand)
```

## Explore and Evaluate New Features

```{r}
suppressWarnings({
# Define a function to create boxplots with mean points
create_boxplot <- function(data, y_var, title, ylab) {
  mean_val <- mean(data[[y_var]], na.rm = TRUE)
  
  plot <- ggplot(data = data, aes_string(y = y_var)) + 
    geom_boxplot(outlier.color = "red", fill = "lightblue") + 
    scale_x_discrete() +
    labs(title = title, y = ylab) + 
    coord_flip() + 
    geom_point(aes(x = 0, y = mean_val),  
               shape = 16,                       
               size = 2,                         
               color = "blue") +
    theme(plot.title = element_text(hjust = 0.5, size = 12))
  
  return(plot)
}

# Create boxplots for each variable
plot1 <- create_boxplot(kidney_data_expand, "gravity", "Urine Specific Gravity", "Gravity")
plot2 <- create_boxplot(kidney_data_expand, "ph", "Urine pH", "pH")
plot3 <- create_boxplot(kidney_data_expand, "osmo", "Urine Osmolarity (mOsm/L)", "Osmo")
plot4 <- create_boxplot(kidney_data_expand, "cond", "Urine Conductivity (mMho)", "Cond")
plot5 <- create_boxplot(kidney_data_expand, "urea", "Urine Urea Concentration (mmol/L)", "Urea")
plot6 <- create_boxplot(kidney_data_expand, "calc", "Urine Calcium Concentration (mmol/L)", "Calc")
plot7 <- create_boxplot(kidney_data_expand, "ph_squared", "Polynomial Feature pH^squared", "pH Squared")
plot8 <- create_boxplot(kidney_data_expand, "ph_cubed", "Polynomial Feature pH^cubed", "pH Cubed")
plot9 <- create_boxplot(kidney_data_expand, "cond_squared", "Polynomial Feature Conductivity^squared", "Cond Squared")
plot10 <- create_boxplot(kidney_data_expand, "cond_cubed", "Polynomial Feature Conductivity^cubed", "Cond Cubed")
plot11 <- create_boxplot(kidney_data_expand, "mean_agg_osmo_cond", "Mean Aggregate Osmolarity and Conductivity", "Mean Agg Osmo Cond")
plot12 <- create_boxplot(kidney_data_expand, "mean_agg_calc_ph", "Mean Aggregate Calcium and pH", "Mean Agg Calc pH")
plot13 <- create_boxplot(kidney_data_expand, "max_agg_osmo_cond", "Max Aggregate Osmolarity and Conductivity", "Max Agg Osmo Cond")
plot14 <- create_boxplot(kidney_data_expand, "max_agg_calc_ph", "Max Aggregate Calcium and pH", "Max Agg Calc pH")
plot15 <- create_boxplot(kidney_data_expand, "calc_to_urea_ratio", "Calcium to Urea Ratio", "Calc to Urea Ratio")
plot16 <- create_boxplot(kidney_data_expand, "osmo_to_cond_ratio", "Osmolarity to Conductivity Ratio", "Osmo to Cond Ratio")

# Arrange boxplots in a 8x2 matrix
grid.arrange(
  arrangeGrob(plot1, plot2, ncol = 2), 
  arrangeGrob(plot3, plot4, ncol = 2), 
  arrangeGrob(plot5, plot6, ncol = 2), 
  arrangeGrob(plot7, plot8, ncol = 2), 
  arrangeGrob(plot9, plot10, ncol = 2), 
  arrangeGrob(plot11, plot12, ncol = 2),
  arrangeGrob(plot13, plot14, ncol = 2), 
  arrangeGrob(plot15, plot16, ncol = 2), 
  ncol = 1
)
})
```

### Further investigate Outliers

```{r}
# Grubbs' test for single outlier
grubbs_test_ph_sq <- grubbs.test(kidney_data_expand$ph_squared, type = 10)
grubbs_test_ph_cu <- grubbs.test(kidney_data_expand$ph_cubed, type = 10)
grubbs_test_cond_cu <- grubbs.test(kidney_data_expand$cond_cubed, type = 10)
grubbs_test_mean_calc_ph <- grubbs.test(kidney_data_expand$mean_agg_calc_ph, type = 10)
grubbs_test_max_calc_ph <- grubbs.test(kidney_data_expand$max_agg_calc_ph, type = 10)
grubbs_test_rat_calc_Urea <- grubbs.test(kidney_data_expand$calc_to_urea_ratio, type = 10)
grubbs_test_rat_osmo_cond <- grubbs.test(kidney_data_expand$osmo_to_cond_ratio, type = 10)

# Print Grubbs' test results
cat("Grubbs' test for ph_sq:\n")
print(grubbs_test_ph_sq)

cat("Grubbs' test for ph_cu:\n")
print(grubbs_test_ph_cu)

cat("Grubbs' test for cond_cu:\n")
print(grubbs_test_cond_cu)

cat("Grubbs' test for mean_agg_calc_ph:\n")
print(grubbs_test_mean_calc_ph)

cat("Grubbs' test for max_agg_calc_ph:\n")
print(grubbs_test_max_calc_ph)

cat("Grubbs' test for calc_to_urea_ratio:\n")
print(grubbs_test_rat_calc_Urea)

cat("Grubbs' test for osmo_to_cond_ratio:\n")
print(grubbs_test_rat_osmo_cond)

```

```{r}
suppressWarnings({
  # Function to calculate z-scores for a vector
calculate_z_scores <- function(x) { (x - mean(x)) / sd(x) }

# Set the z-score threshold for outlier detection
z_score_threshold <- 2.5

# Calculate z-scores for all relevant features
ph_sq_z_scores <- calculate_z_scores(kidney_data_expand$ph_squared)
ph_cu_z_scores <- calculate_z_scores(kidney_data_expand$ph_cubed)
cond_cu_z_scores <- calculate_z_scores(kidney_data_expand$cond_cubed)
mean_calc_ph_z_scores <- calculate_z_scores(kidney_data_expand$mean_agg_calc_ph)
max_calc_ph_z_scores <- calculate_z_scores(kidney_data_expand$max_agg_calc_ph)
calc_urea_ratio_z_scores <- calculate_z_scores(kidney_data_expand$calc_to_urea_ratio)
osmo_cond_ratio_z_scores <- calculate_z_scores(kidney_data_expand$osmo_to_cond_ratio)

# Identify outliers based on z-scores
ph_sq_outliers <- kidney_data_expand %>% filter(abs(ph_sq_z_scores) > z_score_threshold) %>% select(ph_squared)
ph_cu_outliers <- kidney_data_expand %>% filter(abs(ph_cu_z_scores) > z_score_threshold) %>% select(ph_cubed)
cond_cu_outliers <- kidney_data_expand %>% filter(abs(cond_cu_z_scores) > z_score_threshold) %>% select(cond_cubed)
mean_calc_ph_outliers <- kidney_data_expand %>% filter(abs(mean_calc_ph_z_scores) > z_score_threshold) %>% select(mean_agg_calc_ph)
max_calc_ph_outliers <- kidney_data_expand %>% filter(abs(max_calc_ph_z_scores) > z_score_threshold) %>% select(max_agg_calc_ph)
calc_urea_ratio_outliers <- kidney_data_expand %>% filter(abs(calc_urea_ratio_z_scores) > z_score_threshold) %>% select(calc_to_urea_ratio)
osmo_cond_ratio_outliers <- kidney_data_expand %>% filter(abs(osmo_cond_ratio_z_scores) > z_score_threshold) %>% select(osmo_to_cond_ratio)

# Function to apply Dixon's Q test if sample size is between 3 and 30
apply_dixons_q_test <- function(data, column_name) {
  column_data <- data[[column_name]]
  sample_size <- length(column_data)
  
  if (sample_size >= 3 && sample_size <= 30) {
    result <- dixon.test(column_data, opposite = TRUE)
    return(result)
  } else {
    return(paste("Sample size for", column_name, "is", sample_size, "which is outside the range of 3-30"))
  }
}

# Perform Dixon's Q test on identified outliers from z-score method
ph_sq_test_results <- apply_dixons_q_test(ph_sq_outliers, "ph_squared")
ph_cu_test_results <- apply_dixons_q_test(ph_cu_outliers, "ph_cubed")
cond_cu_test_results <- apply_dixons_q_test(cond_cu_outliers, "cond_cubed")
mean_calc_ph_test_results <- apply_dixons_q_test(mean_calc_ph_outliers, "mean_agg_calc_ph")
max_calc_ph_test_results <- apply_dixons_q_test(max_calc_ph_outliers, "max_agg_calc_ph")
calc_urea_ratio_test_results <- apply_dixons_q_test(calc_urea_ratio_outliers, "calc_to_urea_ratio")
osmo_cond_ratio_test_results <- apply_dixons_q_test(osmo_cond_ratio_outliers, "osmo_to_cond_ratio")

# Print the Dixon's Q test results
cat("Dixon's Q Test Results:\n")
print(ph_sq_test_results)
print(ph_cu_test_results)
print(cond_cu_test_results)
print(mean_calc_ph_test_results)
print(max_calc_ph_test_results)
print(calc_urea_ratio_test_results)
print(osmo_cond_ratio_test_results)

# Perform Grubbs' test for each feature
cat("Grubbs' Test Results:\n")
print(grubbs.test(kidney_data_expand$ph_squared, type = 10))
print(grubbs.test(kidney_data_expand$ph_cubed, type = 10))
print(grubbs.test(kidney_data_expand$cond_cubed, type = 10))
print(grubbs.test(kidney_data_expand$mean_agg_calc_ph, type = 10))
print(grubbs.test(kidney_data_expand$max_agg_calc_ph, type = 10))
print(grubbs.test(kidney_data_expand$calc_to_urea_ratio, type = 10))
print(grubbs.test(kidney_data_expand$osmo_to_cond_ratio, type = 10))

})

```

### Scatter plots - Expanded Predictor Relationships

```{r}
# Define the predictor variables
kidney_predictor_expand <- c("gravity", "ph", "osmo", "cond", "urea", "calc","ph_squared", "ph_cubed", "cond_squared", "cond_cubed", "mean_agg_osmo_cond", "mean_agg_calc_ph", "max_agg_osmo_cond", "max_agg_calc_ph", "calc_to_urea_ratio", "osmo_to_cond_ratio")

# Subset the kidney_data dataframe using the predictor variables
kidney_predictor_data_expand = kidney_data_expand[kidney_predictor_expand]

# Run grid of pairwise scatter plots for preditor variables
pairs(kidney_predictor_data_expand)
```

### Correlation Matrix - Predictor Relationships

```{r}
# Calculate correlations for predictor variables:
kidney_correlations_expand <- cor(kidney_predictor_data_expand)

# Plot the correlation matrix for kidney data
corrplot(kidney_correlations_expand, method = 'color', order = 'hclust', addCoef.col = 'black', tl.pos = 'd', tl.cex = .6, number.cex = 0.5, cl.pos = 'r', col = COL2('PRGn'), outline=TRUE)

# Round the correlation matrix for better readability
rounded_correlations_expand <- round(kidney_correlations_expand, 2)

# Convert the matrix to a data frame 
df_correlations_expand <- as.data.frame(rounded_correlations_expand)

df_correlations_expand
```

#### Predictor Variable Correlation with Target Variable

```{r}
# Calculate correlation matrix
cor_matrix <- cor(kidney_data_expand)

# Extract correlations with the target variable
cor_with_target <- cor_matrix[, "target"]

# Create data frame for plotting
cor_df <- data.frame(Variable = rownames(cor_matrix), Correlation = cor_with_target)

# Remove the row corresponding to 'target'
cor_df <- cor_df[cor_df$Variable != "target", ]

print(cor_df)

# Plot correlation values with the target variable using a bar plot
ggplot(cor_df, aes(x = reorder(Variable, -Correlation), y = Correlation)) +
  geom_bar(stat = "identity", fill = "dodgerblue") +
  coord_flip() +
  labs(title = "Correlation with the Target Variable",
       x = "Predictor Variable",
       y = "Correlation") +
  theme_minimal() +
    theme(plot.title = element_text(hjust = 0.5, size = 14))
```

## Test for Multicollinearity and Feature Importance

```{r}
# Move the 'target' column to the end
kidney_data_expand <- kidney_data_expand[c(setdiff(names(kidney_data_expand), "target"), "target")]
head(kidney_data_expand)
```

```{r}
# Ensure the target variable is treated as a factor for classification
kidney_data_expand$target <- as.factor(kidney_data_expand$target)

# Fit the RandomForest model as a classifier
rf_classifier <- randomForest(target ~ ., data = kidney_data_expand, ntree = 500, importance = TRUE)

# View the importance of each feature
importance(rf_classifier)

# Plot feature importance
varImpPlot(rf_classifier)
```

### Feature Reduction Based on Correlation

```{r}
# find highly correlated predictors
highCorr_kidney_expand <- findCorrelation(kidney_correlations_expand, cutoff = .75, verbose = TRUE) 

dim(highCorr_kidney_expand)

# remove highly correlated predictors
filtered_kidney_expand <- kidney_data_expand[, -highCorr_kidney_expand] 

head(filtered_kidney_expand)
```

## Begin Modeling

### Cross Validation - Original Data Frame Model

```{r}
# Set a seed for reproducibility
set.seed(123)

# Ensure the target variable is treated as a factor for classification
kidney_data$target <- as.factor(kidney_data$target)

# Rename target levels manually
levels(kidney_data$target) <- c("Class0", "Class1")


# Set up training control
train_control <- trainControl(
  method = "cv",
  number = 10,
  classProbs = TRUE,  
  summaryFunction = twoClassSummary,  
  savePredictions = "final"  
)

# Define a list of models to train with updated metric for optimization
kidney_models_Orig_cv <- list(
  logistic_Orig_cv = train(target ~ ., 
                   data = kidney_data, 
                   method = "glmnet", 
                   preProc = c("center", "scale"),
                   metric = "ROC",
                   family = "binomial", 
                   trControl = train_control),
  
  decision_tree_Orig_cv = train(target ~ ., 
                        data = kidney_data, 
                        method = "rpart",
                        preProc = c("center", "scale"),
                        metric = "ROC",
                        trControl = train_control),
  
  random_forest_Orig_cv = train(target ~ ., 
                        data = kidney_data, 
                        method = "rf",
                        preProc = c("center", "scale"),
                        metric = "ROC",
                        trControl = train_control),
  
  svm_Orig_cv = train(target ~ ., 
              data = kidney_data, 
              method = "svmRadial",
              preProc = c("center", "scale"),
              metric = "ROC",
              trControl = train_control)
)

# Evaluate model
extract_metrics <- function(model, model_name) {
  # Extract results and predictions from the model
  results <- model$results
  preds <- model$pred  

  # Calculate Accuracy from the predictions
  correct_predictions <- preds$obs == preds$pred
  accuracy <- sum(correct_predictions) / nrow(preds)

  # Create a data frame with calculated metrics
  data.frame(
    Model = model_name,
    Accuracy = accuracy,
    ROC = max(results$ROC, na.rm = TRUE),
    Sensitivity = max(results$Sens, na.rm = TRUE),
    Specificity = max(results$Spec, na.rm = TRUE)
  )
}

# Apply the updated extraction function
orig_cv_metrics_df <- do.call(rbind, lapply(names(kidney_models_Orig_cv), function(name) {
  extract_metrics(kidney_models_Orig_cv[[name]], name)
}))

# Print the combined metrics DataFrame
print(orig_cv_metrics_df)

```

### ROC-AUC Curve - Cross Validation - Original Data Frame Model

```{r}
suppressMessages({

  set.seed(123)
  
# Create an empty list to store ROC curve plots
roc_plots <- list()

# Loop through each model to calculate ROC curves and plot them
for (name in names(kidney_models_Orig_cv)) {
  # Extract predictions for the current model
  preds <- kidney_models_Orig_cv[[name]]$pred
  
  # Calculate ROC curve using pROC
  roc_obj <- roc(response = preds$obs, predictor = as.numeric(preds$Class1))

  # Create the ROC plot using ggplot2
  roc_plot <- ggplot(data = data.frame(
                        TPR = roc_obj$sensitivities,
                        FPR = roc_obj$specificities),
                     aes(x = FPR, y = TPR)) +
    geom_line() +
    geom_abline(linetype = "dashed") +
    labs(title = paste("ROC Curve for", name),
         x = "False Positive Rate (1 - Specificity)",
         y = "True Positive Rate (Sensitivity)") +
    annotate("text", x = .5, y = .5, label = sprintf("AUC = %.2f", auc(roc_obj)), parse = TRUE)

  # Store the plot in the list
  roc_plots[[name]] <- roc_plot
}

# Using an invisible() wrapper to suppress automatic output
invisible(lapply(roc_plots, print))
})
```

### Variable Importance - Cross Validation - Original Data Frame Model

```{r}
# Function to calculate and plot variable importance
plot_variable_importance <- function(model, model_name) {
  # Calculate variable importance
  var_imp <- varImp(model, scale = FALSE)

  # Plot the top 5 important variables
  plot_obj <- plot(var_imp, top = 5, main = paste("Variable Importance for", model_name))
  
  # Explicitly print the plot object
  print(plot_obj)
}


# Loop through each model in the list and plot variable importance
for (name in names(kidney_models_Orig_cv)) {
  plot_variable_importance(kidney_models_Orig_cv[[name]], name)
}

```

### Leave-One-Out Cross-Validation - Original Data Frame Model

```{r}
# Set a seed for reproducibility
set.seed(123)

# Ensure the target variable is treated as a factor for classification
kidney_data$target <- as.factor(kidney_data$target)

# Rename target levels manually
levels(kidney_data$target) <- c("Class0", "Class1")


# Set up training control
train_control <- trainControl(
  method = "LOOCV",
  number = 10,
  classProbs = TRUE,  
  summaryFunction = twoClassSummary,  
  savePredictions = "final"  
)

# Define a list of models to train with updated metric for optimization
kidney_models_Orig_loocv <- list(
  logistic_Orig_loocv = train(target ~ ., 
                   data = kidney_data, 
                   method = "glmnet", 
                   preProc = c("center", "scale"),
                   metric = "ROC",
                   family = "binomial", 
                   trControl = train_control),
  
  decision_tree_Orig_loocv = train(target ~ ., 
                        data = kidney_data, 
                        method = "rpart",
                        preProc = c("center", "scale"),
                        metric = "ROC",
                        trControl = train_control),
  
  random_forest_Orig_loocv = train(target ~ ., 
                        data = kidney_data, 
                        method = "rf",
                        preProc = c("center", "scale"),
                        metric = "ROC",
                        trControl = train_control),
  
  svm_Orig_loocv = train(target ~ ., 
              data = kidney_data, 
              method = "svmRadial",
              preProc = c("center", "scale"),
              metric = "ROC",
              trControl = train_control)
)

# Evaluate model
extract_metrics <- function(model, model_name) {
  # Extract results and predictions from the model
  results <- model$results
  preds <- model$pred  

  # Calculate Accuracy from the predictions
  correct_predictions <- preds$obs == preds$pred
  accuracy <- sum(correct_predictions) / nrow(preds)

  # Create a data frame with calculated metrics
  data.frame(
    Model = model_name,
    Accuracy = accuracy,
    ROC = max(results$ROC, na.rm = TRUE),
    Sensitivity = max(results$Sens, na.rm = TRUE),
    Specificity = max(results$Spec, na.rm = TRUE)
  )
}

# Apply the updated extraction function
orig_loocv_metrics_df <- do.call(rbind, lapply(names(kidney_models_Orig_loocv), function(name) {
  extract_metrics(kidney_models_Orig_loocv[[name]], name)
}))

# Print the combined metrics DataFrame
print(orig_loocv_metrics_df)

```

### ROC-AUC Curve - Leave-One-Out Cross-Validation - Original Data Frame Model

```{r}
suppressMessages({

  set.seed(123)
  
# Create an empty list to store ROC curve plots
roc_plots <- list()

# Loop through each model to calculate ROC curves and plot them
for (name in names(kidney_models_Orig_loocv)) {
  # Extract predictions for the current model
  preds <- kidney_models_Orig_loocv[[name]]$pred
  
  # Calculate ROC curve using pROC
  roc_obj <- roc(response = preds$obs, predictor = as.numeric(preds$Class1))

  # Create the ROC plot using ggplot2
  roc_plot <- ggplot(data = data.frame(
                        TPR = roc_obj$sensitivities,
                        FPR = roc_obj$specificities),
                     aes(x = FPR, y = TPR)) +
    geom_line() +
    geom_abline(linetype = "dashed") +
    labs(title = paste("ROC Curve for", name),
         x = "False Positive Rate (1 - Specificity)",
         y = "True Positive Rate (Sensitivity)") +
    annotate("text", x = .5, y = .5, label = sprintf("AUC = %.2f", auc(roc_obj)), parse = TRUE)

  # Store the plot in the list
  roc_plots[[name]] <- roc_plot
}

# Using an invisible() wrapper to suppress automatic output
invisible(lapply(roc_plots, print))
})
```

### Variable Importance - Leave-One-Out Cross-Validation - Original Data Frame Model

```{r}
# Function to calculate and plot variable importance
plot_variable_importance <- function(model, model_name) {
  # Calculate variable importance
  var_imp <- varImp(model, scale = FALSE)

  # Plot the top 5 important variables
  plot_obj <- plot(var_imp, top = 5, main = paste("Variable Importance for", model_name))
  
  # Explicitly print the plot object
  print(plot_obj)
}


# Loop through each model in the list and plot variable importance
for (name in names(kidney_models_Orig_cv)) {
  plot_variable_importance(kidney_models_Orig_cv[[name]], name)
}

```

### Cross Validation - New Data Frame Model

```{r}
# Set a seed for reproducibility
set.seed(123)

# Ensure the target variable is treated as a factor for classification
kidney_data_expand$target <- as.factor(kidney_data_expand$target)

# Rename target levels manually
levels(kidney_data_expand$target) <- c("Class0", "Class1")


# Set up training control
train_control <- trainControl(
  method = "cv",
  number = 10,
  classProbs = TRUE,  
  summaryFunction = twoClassSummary,  
  savePredictions = "final"  
)

# Define a list of models to train with updated metric for optimization
kidney_models_new_cv <- list(
  logistic_new_cv = train(target ~ ., 
                   data = kidney_data_expand, 
                   method = "glmnet", 
                   preProc = c("center", "scale"),
                   metric = "ROC",
                   family = "binomial", 
                   trControl = train_control),
  
  decision_tree_new_cv = train(target ~ ., 
                        data = kidney_data_expand, 
                        method = "rpart",
                        preProc = c("center", "scale"),
                        metric = "ROC",
                        trControl = train_control),
  
  random_forest_new_cv = train(target ~ ., 
                        data = kidney_data_expand, 
                        method = "rf",
                        preProc = c("center", "scale"),
                        metric = "ROC",
                        trControl = train_control),
  
  svm_new_cv = train(target ~ ., 
              data = kidney_data_expand, 
              method = "svmRadial",
              preProc = c("center", "scale"),
              metric = "ROC",
              trControl = train_control)
)

# Evaluate model
extract_metrics <- function(model, model_name) {
  # Extract results and predictions from the model
  results <- model$results
  preds <- model$pred  

  # Calculate Accuracy from the predictions
  correct_predictions <- preds$obs == preds$pred
  accuracy <- sum(correct_predictions) / nrow(preds)

  # Create a data frame with calculated metrics
  data.frame(
    Model = model_name,
    Accuracy = accuracy,
    ROC = max(results$ROC, na.rm = TRUE),
    Sensitivity = max(results$Sens, na.rm = TRUE),
    Specificity = max(results$Spec, na.rm = TRUE)
  )
}

# Apply the updated extraction function
new_cv_metrics_df <- do.call(rbind, lapply(names(kidney_models_new_cv), function(name) {
  extract_metrics(kidney_models_new_cv[[name]], name)
}))

# Print the combined metrics DataFrame
print(new_cv_metrics_df)

```

### ROC-AUC Curve - Cross Validation - New Data Frame Model

```{r}
suppressMessages({

  set.seed(123)
  
# Create an empty list to store ROC curve plots
roc_plots <- list()

# Loop through each model to calculate ROC curves and plot them
for (name in names(kidney_models_new_cv)) {
  # Extract predictions for the current model
  preds <- kidney_models_new_cv[[name]]$pred
  
  # Calculate ROC curve using pROC
  roc_obj <- roc(response = preds$obs, predictor = as.numeric(preds$Class1))

  # Create the ROC plot using ggplot2
  roc_plot <- ggplot(data = data.frame(
                        TPR = roc_obj$sensitivities,
                        FPR = roc_obj$specificities),
                     aes(x = FPR, y = TPR)) +
    geom_line() +
    geom_abline(linetype = "dashed") +
    labs(title = paste("ROC Curve for", name),
         x = "False Positive Rate (1 - Specificity)",
         y = "True Positive Rate (Sensitivity)") +
    annotate("text", x = .5, y = .5, label = sprintf("AUC = %.2f", auc(roc_obj)), parse = TRUE)

  # Store the plot in the list
  roc_plots[[name]] <- roc_plot
}

# Using an invisible() wrapper to suppress automatic output
invisible(lapply(roc_plots, print))
})
```

### Variable Importance - Cross Validation - New Data Frame Model

```{r}
# Function to calculate and plot variable importance
plot_variable_importance <- function(model, model_name) {
  # Calculate variable importance
  var_imp <- varImp(model, scale = FALSE)

  # Plot the top 5 important variables
  plot_obj <- plot(var_imp, top = 5, main = paste("Variable Importance for", model_name))
  
  # Explicitly print the plot object
  print(plot_obj)
}


# Loop through each model in the list and plot variable importance
for (name in names(kidney_models_new_cv)) {
  plot_variable_importance(kidney_models_new_cv[[name]], name)
}
```

### Leave-One-Out Cross-Validation - New Data Frame Model

```{r}
# Set a seed for reproducibility
set.seed(123)

# Ensure the target variable is treated as a factor for classification
kidney_data_expand$target <- as.factor(kidney_data_expand$target)

# Rename target levels manually
levels(kidney_data_expand$target) <- c("Class0", "Class1")


# Set up training control
train_control <- trainControl(
  method = "LOOCV",
  number = 10,
  classProbs = TRUE,  
  summaryFunction = twoClassSummary,  
  savePredictions = "final"  
)

# Define a list of models to train with updated metric for optimization
kidney_models_new_loocv <- list(
  logistic_new_loocv = train(target ~ ., 
                   data = kidney_data_expand, 
                   method = "glmnet", 
                   preProc = c("center", "scale"),
                   metric = "ROC",
                   family = "binomial", 
                   trControl = train_control),
  
  decision_tree_new_loocv = train(target ~ ., 
                        data = kidney_data_expand, 
                        method = "rpart",
                        preProc = c("center", "scale"),
                        metric = "ROC",
                        trControl = train_control),
  
  random_forest_new_loocv = train(target ~ ., 
                        data = kidney_data_expand, 
                        method = "rf",
                        preProc = c("center", "scale"),
                        metric = "ROC",
                        trControl = train_control),
  
  svm_new_loocv = train(target ~ ., 
              data = kidney_data_expand, 
              method = "svmRadial",
              preProc = c("center", "scale"),
              metric = "ROC",
              trControl = train_control)
)

# Evaluate model
extract_metrics <- function(model, model_name) {
  # Extract results and predictions from the model
  results <- model$results
  preds <- model$pred  

  # Calculate Accuracy from the predictions
  correct_predictions <- preds$obs == preds$pred
  accuracy <- sum(correct_predictions) / nrow(preds)

  # Create a data frame with calculated metrics
  data.frame(
    Model = model_name,
    Accuracy = accuracy,
    ROC = max(results$ROC, na.rm = TRUE),
    Sensitivity = max(results$Sens, na.rm = TRUE),
    Specificity = max(results$Spec, na.rm = TRUE)
  )
}

# Apply the updated extraction function
new_loocv_metrics_df <- do.call(rbind, lapply(names(kidney_models_new_loocv), function(name) {
  extract_metrics(kidney_models_new_loocv[[name]], name)
}))

# Print the combined metrics DataFrame
print(new_loocv_metrics_df)

```

### ROC-AUC Curve - Leave-One-Out Cross-Validation - New Data Frame Model

```{r}
suppressMessages({

  set.seed(123)
  
# Create an empty list to store ROC curve plots
roc_plots <- list()

# Loop through each model to calculate ROC curves and plot them
for (name in names(kidney_models_new_loocv)) {
  # Extract predictions for the current model
  preds <- kidney_models_new_loocv[[name]]$pred
  
  # Calculate ROC curve using pROC
  roc_obj <- roc(response = preds$obs, predictor = as.numeric(preds$Class1))

  # Create the ROC plot using ggplot2
  roc_plot <- ggplot(data = data.frame(
                        TPR = roc_obj$sensitivities,
                        FPR = roc_obj$specificities),
                     aes(x = FPR, y = TPR)) +
    geom_line() +
    geom_abline(linetype = "dashed") +
    labs(title = paste("ROC Curve for", name),
         x = "False Positive Rate (1 - Specificity)",
         y = "True Positive Rate (Sensitivity)") +
    annotate("text", x = .5, y = .5, label = sprintf("AUC = %.2f", auc(roc_obj)), parse = TRUE)

  # Store the plot in the list
  roc_plots[[name]] <- roc_plot
}

# Using an invisible() wrapper to suppress automatic output
invisible(lapply(roc_plots, print))
})
```

### Variable Importance - Leave-One-Out Cross-Validation - New Data Frame Model

```{r}
# Function to calculate and plot variable importance
plot_variable_importance <- function(model, model_name) {
  # Calculate variable importance
  var_imp <- varImp(model, scale = FALSE)

  # Plot the top 5 important variables
  plot_obj <- plot(var_imp, top = 5, main = paste("Variable Importance for", model_name))
  
  # Explicitly print the plot object
  print(plot_obj)
}


# Loop through each model in the list and plot variable importance
for (name in names(kidney_models_new_loocv)) {
  plot_variable_importance(kidney_models_new_loocv[[name]], name)
}
```
