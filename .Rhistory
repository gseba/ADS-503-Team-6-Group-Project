})
# Function to calculate and plot variable importance
plot_variable_importance <- function(model, model_name) {
# Calculate variable importance
var_imp <- varImp(model, scale = FALSE)
# Plot the top 5 important variables
plot_obj <- plot(var_imp, top = 5, main = paste("Variable Importance for", model_name))
# Explicitly print the plot object
print(plot_obj)
}
# Loop through each model in the list and plot variable importance
for (name in names(kidney_models_Orig_cv)) {
plot_variable_importance(kidney_models_Orig_cv[[name]], name)
}
# Set a seed for reproducibility
set.seed(123)
# Ensure the target variable is treated as a factor for classification
kidney_data$target <- as.factor(kidney_data$target)
# Rename target levels manually
levels(kidney_data$target) <- c("Class0", "Class1")
# Set up training control
train_control <- trainControl(
method = "LOOCV",
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# Define a list of models to train with updated metric for optimization
kidney_models_Orig_loocv <- list(
logistic_Orig_loocv = train(target ~ .,
data = kidney_data,
method = "glmnet",
preProc = c("center", "scale"),
metric = "ROC",
family = "binomial",
trControl = train_control),
decision_tree_Orig_loocv = train(target ~ .,
data = kidney_data,
method = "rpart",
preProc = c("center", "scale"),
metric = "ROC",
trControl = train_control),
random_forest_Orig_loocv = train(target ~ .,
data = kidney_data,
method = "rf",
preProc = c("center", "scale"),
metric = "ROC",
trControl = train_control),
svm_Orig_loocv = train(target ~ .,
data = kidney_data,
method = "svmRadial",
preProc = c("center", "scale"),
metric = "ROC",
trControl = train_control)
)
# Evaluate model
extract_metrics <- function(model, model_name) {
# Extract results and predictions from the model
results <- model$results
preds <- model$pred
# Calculate Accuracy from the predictions
correct_predictions <- preds$obs == preds$pred
accuracy <- sum(correct_predictions) / nrow(preds)
# Create a data frame with calculated metrics
data.frame(
Model = model_name,
Accuracy = accuracy,
ROC = max(results$ROC, na.rm = TRUE),
Sensitivity = max(results$Sens, na.rm = TRUE),
Specificity = max(results$Spec, na.rm = TRUE)
)
}
# Apply the updated extraction function
orig_loocv_metrics_df <- do.call(rbind, lapply(names(kidney_models_Orig_loocv), function(name) {
extract_metrics(kidney_models_Orig_loocv[[name]], name)
}))
# Print the combined metrics DataFrame
print(orig_loocv_metrics_df)
suppressMessages({
set.seed(123)
# Create an empty list to store ROC curve plots
roc_plots <- list()
# Loop through each model to calculate ROC curves and plot them
for (name in names(kidney_models_Orig_loocv)) {
# Extract predictions for the current model
preds <- kidney_models_Orig_loocv[[name]]$pred
# Calculate ROC curve using pROC
roc_obj <- roc(response = preds$obs, predictor = as.numeric(preds$Class1))
# Create the ROC plot using ggplot2
roc_plot <- ggplot(data = data.frame(
TPR = roc_obj$sensitivities,
FPR = roc_obj$specificities),
aes(x = FPR, y = TPR)) +
geom_line() +
geom_abline(linetype = "dashed") +
labs(title = paste("ROC Curve for", name),
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)") +
annotate("text", x = .5, y = .5, label = sprintf("AUC = %.2f", auc(roc_obj)), parse = TRUE)
# Store the plot in the list
roc_plots[[name]] <- roc_plot
}
# Using an invisible() wrapper to suppress automatic output
invisible(lapply(roc_plots, print))
})
# Function to calculate and plot variable importance
plot_variable_importance <- function(model, model_name) {
# Calculate variable importance
var_imp <- varImp(model, scale = FALSE)
# Plot the top 5 important variables
plot_obj <- plot(var_imp, top = 5, main = paste("Variable Importance for", model_name))
# Explicitly print the plot object
print(plot_obj)
}
# Loop through each model in the list and plot variable importance
for (name in names(kidney_models_Orig_cv)) {
plot_variable_importance(kidney_models_Orig_cv[[name]], name)
}
# Set a seed for reproducibility
set.seed(123)
# Ensure the target variable is treated as a factor for classification
kidney_data_expand$target <- as.factor(kidney_data_expand$target)
# Rename target levels manually
levels(kidney_data_expand$target) <- c("Class0", "Class1")
# Set up training control
train_control <- trainControl(
method = "cv",
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# Define a list of models to train with updated metric for optimization
kidney_models_new_cv <- list(
logistic_new_cv = train(target ~ .,
data = kidney_data_expand,
method = "glmnet",
preProc = c("center", "scale"),
metric = "ROC",
family = "binomial",
trControl = train_control),
decision_tree_new_cv = train(target ~ .,
data = kidney_data_expand,
method = "rpart",
preProc = c("center", "scale"),
metric = "ROC",
trControl = train_control),
random_forest_new_cv = train(target ~ .,
data = kidney_data_expand,
method = "rf",
preProc = c("center", "scale"),
metric = "ROC",
trControl = train_control),
svm_new_cv = train(target ~ .,
data = kidney_data_expand,
method = "svmRadial",
preProc = c("center", "scale"),
metric = "ROC",
trControl = train_control)
)
# Evaluate model
extract_metrics <- function(model, model_name) {
# Extract results and predictions from the model
results <- model$results
preds <- model$pred
# Calculate Accuracy from the predictions
correct_predictions <- preds$obs == preds$pred
accuracy <- sum(correct_predictions) / nrow(preds)
# Create a data frame with calculated metrics
data.frame(
Model = model_name,
Accuracy = accuracy,
ROC = max(results$ROC, na.rm = TRUE),
Sensitivity = max(results$Sens, na.rm = TRUE),
Specificity = max(results$Spec, na.rm = TRUE)
)
}
# Apply the updated extraction function
new_cv_metrics_df <- do.call(rbind, lapply(names(kidney_models_new_cv), function(name) {
extract_metrics(kidney_models_new_cv[[name]], name)
}))
# Print the combined metrics DataFrame
print(new_cv_metrics_df)
suppressMessages({
set.seed(123)
# Create an empty list to store ROC curve plots
roc_plots <- list()
# Loop through each model to calculate ROC curves and plot them
for (name in names(kidney_models_new_cv)) {
# Extract predictions for the current model
preds <- kidney_models_new_cv[[name]]$pred
# Calculate ROC curve using pROC
roc_obj <- roc(response = preds$obs, predictor = as.numeric(preds$Class1))
# Create the ROC plot using ggplot2
roc_plot <- ggplot(data = data.frame(
TPR = roc_obj$sensitivities,
FPR = roc_obj$specificities),
aes(x = FPR, y = TPR)) +
geom_line() +
geom_abline(linetype = "dashed") +
labs(title = paste("ROC Curve for", name),
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)") +
annotate("text", x = .5, y = .5, label = sprintf("AUC = %.2f", auc(roc_obj)), parse = TRUE)
# Store the plot in the list
roc_plots[[name]] <- roc_plot
}
# Using an invisible() wrapper to suppress automatic output
invisible(lapply(roc_plots, print))
})
# Function to calculate and plot variable importance
plot_variable_importance <- function(model, model_name) {
# Calculate variable importance
var_imp <- varImp(model, scale = FALSE)
# Plot the top 5 important variables
plot_obj <- plot(var_imp, top = 5, main = paste("Variable Importance for", model_name))
# Explicitly print the plot object
print(plot_obj)
}
# Loop through each model in the list and plot variable importance
for (name in names(kidney_models_new_cv)) {
plot_variable_importance(kidney_models_new_cv[[name]], name)
}
# Set a seed for reproducibility
set.seed(123)
# Ensure the target variable is treated as a factor for classification
kidney_data_expand$target <- as.factor(kidney_data_expand$target)
# Rename target levels manually
levels(kidney_data_expand$target) <- c("Class0", "Class1")
# Set up training control
train_control <- trainControl(
method = "LOOCV",
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final"
)
# Define a list of models to train with updated metric for optimization
kidney_models_new_loocv <- list(
logistic_new_loocv = train(target ~ .,
data = kidney_data_expand,
method = "glmnet",
preProc = c("center", "scale"),
metric = "ROC",
family = "binomial",
trControl = train_control),
decision_tree_new_loocv = train(target ~ .,
data = kidney_data_expand,
method = "rpart",
preProc = c("center", "scale"),
metric = "ROC",
trControl = train_control),
random_forest_new_loocv = train(target ~ .,
data = kidney_data_expand,
method = "rf",
preProc = c("center", "scale"),
metric = "ROC",
trControl = train_control),
svm_new_loocv = train(target ~ .,
data = kidney_data_expand,
method = "svmRadial",
preProc = c("center", "scale"),
metric = "ROC",
trControl = train_control)
)
# Evaluate model
extract_metrics <- function(model, model_name) {
# Extract results and predictions from the model
results <- model$results
preds <- model$pred
# Calculate Accuracy from the predictions
correct_predictions <- preds$obs == preds$pred
accuracy <- sum(correct_predictions) / nrow(preds)
# Create a data frame with calculated metrics
data.frame(
Model = model_name,
Accuracy = accuracy,
ROC = max(results$ROC, na.rm = TRUE),
Sensitivity = max(results$Sens, na.rm = TRUE),
Specificity = max(results$Spec, na.rm = TRUE)
)
}
# Apply the updated extraction function
new_loocv_metrics_df <- do.call(rbind, lapply(names(kidney_models_new_loocv), function(name) {
extract_metrics(kidney_models_new_loocv[[name]], name)
}))
# Print the combined metrics DataFrame
print(new_loocv_metrics_df)
suppressMessages({
set.seed(123)
# Create an empty list to store ROC curve plots
roc_plots <- list()
# Loop through each model to calculate ROC curves and plot them
for (name in names(kidney_models_new_loocv)) {
# Extract predictions for the current model
preds <- kidney_models_new_loocv[[name]]$pred
# Calculate ROC curve using pROC
roc_obj <- roc(response = preds$obs, predictor = as.numeric(preds$Class1))
# Create the ROC plot using ggplot2
roc_plot <- ggplot(data = data.frame(
TPR = roc_obj$sensitivities,
FPR = roc_obj$specificities),
aes(x = FPR, y = TPR)) +
geom_line() +
geom_abline(linetype = "dashed") +
labs(title = paste("ROC Curve for", name),
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)") +
annotate("text", x = .5, y = .5, label = sprintf("AUC = %.2f", auc(roc_obj)), parse = TRUE)
# Store the plot in the list
roc_plots[[name]] <- roc_plot
}
# Using an invisible() wrapper to suppress automatic output
invisible(lapply(roc_plots, print))
})
# Function to calculate and plot variable importance
plot_variable_importance <- function(model, model_name) {
# Calculate variable importance
var_imp <- varImp(model, scale = FALSE)
# Plot the top 5 important variables
plot_obj <- plot(var_imp, top = 5, main = paste("Variable Importance for", model_name))
# Explicitly print the plot object
print(plot_obj)
}
# Loop through each model in the list and plot variable importance
for (name in names(kidney_models_new_loocv)) {
plot_variable_importance(kidney_models_new_loocv[[name]], name)
}
for (name in names(kidney_models_new_loocv)) {
model <- kidney_models_new_loocv[[name]]
var_imp <- varImp(model, scale = FALSE)
# Get top 5 important variable names (similar to Option 1)
top_vars <- names(var_imp)[order(var_imp$Importance, decreasing = TRUE)[1:5]]
# Do something with the top_vars list
print(paste("Top variables for", name, ":", top_vars))
}
plot_variable_importance <- function(model, model_name) {
# Calculate variable importance
var_imp <- varImp(model, scale = FALSE)
# Get top 5 important variable names
top_vars <- names(var_imp)[order(var_imp$Importance, decreasing = TRUE)[1:5]]
# Return the top variables (optional: add printing functionality here)
return(top_vars)
}
for (name in names(kidney_models_new_loocv)) {
top_vars <- plot_variable_importance(kidney_models_new_loocv[[name]], name)
# Do something with the top_vars list (e.g., print or store)
print(paste("Top variables for", name, ":", top_vars))
}
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_cv$decision_tree_Orig_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 5)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_cv$decision_tree_Orig_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_cv$decision_tree_Orig_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(logistic_Orig_cv, scale = FALSE)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_cv$logistic_Orig_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_cv$random_forest_Orig_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_cv$random_forest_Orig_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_cv$svm_Orig_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_loocv$logistic_Orig_loocv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_loocv$decision_tree_Orig_loocv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_cv$dec_tree_model_or_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_cv$dec_tree_model_or_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_cv$logistic_Orig_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_cv$decision_tree_Orig_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_loocv$decision_tree_Orig_loocv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_loocv$random_forest_Orig_loocv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_cv$random_forest_Orig_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_cv$logistic_Orig_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_loocv$logistic_Orig_loocv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_Orig_loocv$svm_Orig_loocv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_new_cv$logistic_new_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_new_cv$decision_tree_new_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_new_cv$random_forest_new_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_new_cv$svm_new_cv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_new_loocv$logistic_new_loocv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_new_loocv$decision_tree_new_loocv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_new_loocv$random_forest_new_loocv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_new_loocv$svm_new_loocv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
# Access the Decision tree model stored in the list
dec_tree_model_or_cv <- kidney_models_new_loocv$svm_new_loocv
# Calculate variable importance for the Decision Tree model
orig_cv_dt_Imp <- varImp(dec_tree_model_or_cv, scale = FALSE)
# Plot the top 5 important variables
print(orig_cv_dt_Imp, top = 10)
